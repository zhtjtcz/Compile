
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'CompUnitAnd Comma Const Deq Div Else Equal Geq Ident If Int LBrace LPar Leq Less Main Minus Mod More Neq Not Number Or Plus RBrace RPar Return Semicolon Times\n\tCompUnit : Decls FuncDef\n\t\n\tDecls : Decl Decls\n\t\t  |\n\t\n\tDecl : ConstDecl\n\t\t | VarDecl\n\t\n\tConstDecl : Const BType ConstDefs Semicolon\n\t\n\tConstDefs : ConstDef\n\t\t\t  | ConstDefs Comma ConstDef\n\t\n\tBType : Int\n\t\n\tConstDef : Ident Equal ConstInitVal\n\t\n\tConstInitVal : ConstExp\n\t\n\tConstExp : AddExp\n\t\n\tVarDecl : BType VarDefs Semicolon\n\t\n\tVarDefs : VarDef\n\t\t\t| VarDefs Comma VarDef\n\t\n\tVarDef : Ident Equal InitVal\n           | Ident\n\t\n\tInitVal : Exp\n\t\n\tFuncDef : FuncType Main LPar RPar Block\n\t\n\tFuncType : Int\n\t\n\tBlock : LBrace BlockItems RBrace\n\t\n\tBlockItems :\n\t\t\t   | BlockItems BlockItem\n\t\n\tBlockItem : Decl\n\t\t\t  | Stmt\n\t\n\tStmt : Semicolon\n\t\t | Block\n\t\t | Exp Semicolon\n\t\t | Return Exp Semicolon\n\t\t | LVal Equal Exp Semicolon\n\t\t | If LPar Cond RPar Stmt Else Stmt\n\t\t | If LPar Cond RPar Stmt\n\t\n\tLVal : Ident\n\t\n\tExp : AddExp\n\t\n\tAddExp : MulExp \n           | AddExp Plus MulExp\n\t\t   | AddExp Minus MulExp\n\t\n\tMulExp : UnaryExp\n           | MulExp Times UnaryExp\n\t\t   | MulExp Div UnaryExp\n\t\t   | MulExp Mod UnaryExp\n\t\n\tUnaryExp : PrimaryExp\n\t\t\t | UnaryOp UnaryExp\n\t\t\t | Ident LPar RPar\n\t\t\t | Ident LPar FuncRParams RPar\n\t\n\tFuncRParams : Exp\n\t\t\t\t| Exp Exps\n\t\n\tExps : Comma Exp\n\t\t | Comma Exp Exps\n\t\n\tPrimaryExp : LPar Exp RPar\n\t\t\t   | Number\n\t\t\t   | LVal\n\t\n\tUnaryOp : Plus\n\t\t\t| Minus\n\t\t\t| Not\n\t\n\tCond : LOrExp\n\t\n\tLOrExp : LAndExp\n           | LOrExp Or LAndExp\n\t\n\tLAndExp : EqExp\n            | LAndExp And EqExp\n\t\n\tEqExp : RelExp\n    \t  | EqExp Deq RelExp\n\t\t  | EqExp Neq RelExp\n\t\n\tRelExp : AddExp\n    \t   | RelExp Less AddExp\n\t\t   | RelExp More AddExp\n\t\t   | RelExp Leq AddExp\n\t\t   | RelExp Geq AddExp\n\t'
    
_lr_action_items = {'Int':([0,2,3,4,5,6,12,21,25,57,67,71,72,73,74,75,76,83,88,96,106,116,],[8,11,8,-4,-5,8,-2,-13,-6,-22,8,-21,-23,-24,-25,-26,-27,-28,-29,-30,-32,-31,]),'Const':([0,3,4,5,21,25,57,67,71,72,73,74,75,76,83,88,96,106,116,],[6,6,-4,-5,-13,-6,-22,6,-21,-23,-24,-25,-26,-27,-28,-29,-30,-32,-31,]),'$end':([1,9,56,71,],[0,-1,-19,-21,]),'RBrace':([4,5,21,25,57,67,71,72,73,74,75,76,83,88,96,106,116,],[-4,-5,-13,-6,-22,71,-21,-23,-24,-25,-26,-27,-28,-29,-30,-32,-31,]),'Semicolon':([4,5,14,15,16,18,19,21,25,28,29,30,31,32,33,36,37,40,41,44,45,46,47,54,57,58,61,62,63,64,65,66,67,68,71,72,73,74,75,76,77,79,81,83,84,88,89,96,97,106,115,116,],[-4,-5,21,-14,-17,25,-7,-13,-6,-15,-33,-16,-18,-34,-35,-38,-42,-51,-52,-8,-10,-11,-12,-43,-22,-44,-36,-37,-39,-40,-41,-50,75,-45,-21,-23,-24,-25,-26,-27,83,-52,-33,-28,88,-29,96,-30,75,-32,75,-31,]),'Return':([4,5,21,25,57,67,71,72,73,74,75,76,83,88,96,97,106,115,116,],[-4,-5,-13,-6,-22,78,-21,-23,-24,-25,-26,-27,-28,-29,-30,78,-32,78,-31,]),'If':([4,5,21,25,57,67,71,72,73,74,75,76,83,88,96,97,106,115,116,],[-4,-5,-13,-6,-22,80,-21,-23,-24,-25,-26,-27,-28,-29,-30,80,-32,80,-31,]),'LBrace':([4,5,21,25,43,57,67,71,72,73,74,75,76,83,88,96,97,106,115,116,],[-4,-5,-13,-6,57,-22,57,-21,-23,-24,-25,-26,-27,-28,-29,-30,57,-32,57,-31,]),'Ident':([4,5,7,8,13,21,22,23,25,26,27,34,35,38,39,42,48,49,50,51,52,53,57,67,70,71,72,73,74,75,76,78,83,85,86,88,96,97,98,99,100,101,102,103,104,105,106,115,116,],[-4,-5,16,-9,20,-13,16,29,-6,20,29,-53,-54,29,29,-55,29,29,29,29,29,29,-22,81,29,-21,-23,-24,-25,-26,-27,29,-28,29,29,-29,-30,81,29,29,29,29,29,29,29,29,-32,81,-31,]),'LPar':([4,5,17,21,23,25,27,29,34,35,38,39,42,48,49,50,51,52,53,57,67,70,71,72,73,74,75,76,78,80,81,83,85,86,88,96,97,98,99,100,101,102,103,104,105,106,115,116,],[-4,-5,24,-13,39,-6,39,48,-53,-54,39,39,-55,39,39,39,39,39,39,-22,39,39,-21,-23,-24,-25,-26,-27,39,86,48,-28,39,39,-29,-30,39,39,39,39,39,39,39,39,39,-32,39,-31,]),'Number':([4,5,21,23,25,27,34,35,38,39,42,48,49,50,51,52,53,57,67,70,71,72,73,74,75,76,78,83,85,86,88,96,97,98,99,100,101,102,103,104,105,106,115,116,],[-4,-5,-13,40,-6,40,-53,-54,40,40,-55,40,40,40,40,40,40,-22,40,40,-21,-23,-24,-25,-26,-27,40,-28,40,40,-29,-30,40,40,40,40,40,40,40,40,40,-32,40,-31,]),'Plus':([4,5,21,23,25,27,29,32,33,34,35,36,37,38,39,40,41,42,47,48,49,50,51,52,53,54,57,58,61,62,63,64,65,66,67,68,70,71,72,73,74,75,76,78,79,81,83,85,86,88,95,96,97,98,99,100,101,102,103,104,105,106,111,112,113,114,115,116,],[-4,-5,-13,34,-6,34,-33,49,-35,-53,-54,-38,-42,34,34,-51,-52,-55,49,34,34,34,34,34,34,-43,-22,-44,-36,-37,-39,-40,-41,-50,34,-45,34,-21,-23,-24,-25,-26,-27,34,-52,-33,-28,34,34,-29,49,-30,34,34,34,34,34,34,34,34,34,-32,49,49,49,49,34,-31,]),'Minus':([4,5,21,23,25,27,29,32,33,34,35,36,37,38,39,40,41,42,47,48,49,50,51,52,53,54,57,58,61,62,63,64,65,66,67,68,70,71,72,73,74,75,76,78,79,81,83,85,86,88,95,96,97,98,99,100,101,102,103,104,105,106,111,112,113,114,115,116,],[-4,-5,-13,35,-6,35,-33,50,-35,-53,-54,-38,-42,35,35,-51,-52,-55,50,35,35,35,35,35,35,-43,-22,-44,-36,-37,-39,-40,-41,-50,35,-45,35,-21,-23,-24,-25,-26,-27,35,-52,-33,-28,35,35,-29,50,-30,35,35,35,35,35,35,35,35,35,-32,50,50,50,50,35,-31,]),'Not':([4,5,21,23,25,27,34,35,38,39,42,48,49,50,51,52,53,57,67,70,71,72,73,74,75,76,78,83,85,86,88,96,97,98,99,100,101,102,103,104,105,106,115,116,],[-4,-5,-13,42,-6,42,-53,-54,42,42,-55,42,42,42,42,42,42,-22,42,42,-21,-23,-24,-25,-26,-27,42,-28,42,42,-29,-30,42,42,42,42,42,42,42,42,42,-32,42,-31,]),'Main':([10,11,],[17,-20,]),'Comma':([14,15,16,18,19,28,29,30,31,32,33,36,37,40,41,44,45,46,47,54,58,60,61,62,63,64,65,66,68,82,],[22,-14,-17,26,-7,-15,-33,-16,-18,-34,-35,-38,-42,-51,-52,-8,-10,-11,-12,-43,-44,70,-36,-37,-39,-40,-41,-50,-45,70,]),'Equal':([16,20,79,81,],[23,27,85,-33,]),'RPar':([24,29,32,33,36,37,40,41,48,54,55,58,59,60,61,62,63,64,65,66,68,69,82,87,90,91,92,93,94,95,107,108,109,110,111,112,113,114,],[43,-33,-34,-35,-38,-42,-51,-52,58,-43,66,-44,68,-46,-36,-37,-39,-40,-41,-50,-45,-47,-48,-49,97,-56,-57,-59,-61,-64,-58,-60,-62,-63,-65,-66,-67,-68,]),'Times':([29,33,36,37,40,41,54,58,61,62,63,64,65,66,68,79,81,],[-33,51,-38,-42,-51,-52,-43,-44,51,51,-39,-40,-41,-50,-45,-52,-33,]),'Div':([29,33,36,37,40,41,54,58,61,62,63,64,65,66,68,79,81,],[-33,52,-38,-42,-51,-52,-43,-44,52,52,-39,-40,-41,-50,-45,-52,-33,]),'Mod':([29,33,36,37,40,41,54,58,61,62,63,64,65,66,68,79,81,],[-33,53,-38,-42,-51,-52,-43,-44,53,53,-39,-40,-41,-50,-45,-52,-33,]),'Less':([29,33,36,37,40,41,54,58,61,62,63,64,65,66,68,94,95,109,110,111,112,113,114,],[-33,-35,-38,-42,-51,-52,-43,-44,-36,-37,-39,-40,-41,-50,-45,102,-64,102,102,-65,-66,-67,-68,]),'More':([29,33,36,37,40,41,54,58,61,62,63,64,65,66,68,94,95,109,110,111,112,113,114,],[-33,-35,-38,-42,-51,-52,-43,-44,-36,-37,-39,-40,-41,-50,-45,103,-64,103,103,-65,-66,-67,-68,]),'Leq':([29,33,36,37,40,41,54,58,61,62,63,64,65,66,68,94,95,109,110,111,112,113,114,],[-33,-35,-38,-42,-51,-52,-43,-44,-36,-37,-39,-40,-41,-50,-45,104,-64,104,104,-65,-66,-67,-68,]),'Geq':([29,33,36,37,40,41,54,58,61,62,63,64,65,66,68,94,95,109,110,111,112,113,114,],[-33,-35,-38,-42,-51,-52,-43,-44,-36,-37,-39,-40,-41,-50,-45,105,-64,105,105,-65,-66,-67,-68,]),'Deq':([29,33,36,37,40,41,54,58,61,62,63,64,65,66,68,93,94,95,108,109,110,111,112,113,114,],[-33,-35,-38,-42,-51,-52,-43,-44,-36,-37,-39,-40,-41,-50,-45,100,-61,-64,100,-62,-63,-65,-66,-67,-68,]),'Neq':([29,33,36,37,40,41,54,58,61,62,63,64,65,66,68,93,94,95,108,109,110,111,112,113,114,],[-33,-35,-38,-42,-51,-52,-43,-44,-36,-37,-39,-40,-41,-50,-45,101,-61,-64,101,-62,-63,-65,-66,-67,-68,]),'And':([29,33,36,37,40,41,54,58,61,62,63,64,65,66,68,92,93,94,95,107,108,109,110,111,112,113,114,],[-33,-35,-38,-42,-51,-52,-43,-44,-36,-37,-39,-40,-41,-50,-45,99,-59,-61,-64,99,-60,-62,-63,-65,-66,-67,-68,]),'Or':([29,33,36,37,40,41,54,58,61,62,63,64,65,66,68,91,92,93,94,95,107,108,109,110,111,112,113,114,],[-33,-35,-38,-42,-51,-52,-43,-44,-36,-37,-39,-40,-41,-50,-45,98,-57,-59,-61,-64,-58,-60,-62,-63,-65,-66,-67,-68,]),'Else':([71,75,76,83,88,96,106,116,],[-21,-26,-27,-28,-29,-30,115,-31,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'CompUnit':([0,],[1,]),'Decls':([0,3,],[2,12,]),'Decl':([0,3,67,],[3,3,73,]),'ConstDecl':([0,3,67,],[4,4,4,]),'VarDecl':([0,3,67,],[5,5,5,]),'BType':([0,3,6,67,],[7,7,13,7,]),'FuncDef':([2,],[9,]),'FuncType':([2,],[10,]),'VarDefs':([7,],[14,]),'VarDef':([7,22,],[15,28,]),'ConstDefs':([13,],[18,]),'ConstDef':([13,26,],[19,44,]),'InitVal':([23,],[30,]),'Exp':([23,39,48,67,70,78,85,97,115,],[31,55,60,77,82,84,89,77,77,]),'AddExp':([23,27,39,48,67,70,78,85,86,97,98,99,100,101,102,103,104,105,115,],[32,47,32,32,32,32,32,32,95,32,95,95,95,95,111,112,113,114,32,]),'MulExp':([23,27,39,48,49,50,67,70,78,85,86,97,98,99,100,101,102,103,104,105,115,],[33,33,33,33,61,62,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,]),'UnaryExp':([23,27,38,39,48,49,50,51,52,53,67,70,78,85,86,97,98,99,100,101,102,103,104,105,115,],[36,36,54,36,36,36,36,63,64,65,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,]),'PrimaryExp':([23,27,38,39,48,49,50,51,52,53,67,70,78,85,86,97,98,99,100,101,102,103,104,105,115,],[37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,]),'UnaryOp':([23,27,38,39,48,49,50,51,52,53,67,70,78,85,86,97,98,99,100,101,102,103,104,105,115,],[38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,]),'LVal':([23,27,38,39,48,49,50,51,52,53,67,70,78,85,86,97,98,99,100,101,102,103,104,105,115,],[41,41,41,41,41,41,41,41,41,41,79,41,41,41,41,79,41,41,41,41,41,41,41,41,79,]),'ConstInitVal':([27,],[45,]),'ConstExp':([27,],[46,]),'Block':([43,67,97,115,],[56,76,76,76,]),'FuncRParams':([48,],[59,]),'BlockItems':([57,],[67,]),'Exps':([60,82,],[69,87,]),'BlockItem':([67,],[72,]),'Stmt':([67,97,115,],[74,106,116,]),'Cond':([86,],[90,]),'LOrExp':([86,],[91,]),'LAndExp':([86,98,],[92,107,]),'EqExp':([86,98,99,],[93,93,108,]),'RelExp':([86,98,99,100,101,],[94,94,94,109,110,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> CompUnit","S'",1,None,None,None),
  ('CompUnit -> Decls FuncDef','CompUnit',2,'p_CompUnit','analyze.py',8),
  ('Decls -> Decl Decls','Decls',2,'p_Decls','analyze.py',17),
  ('Decls -> <empty>','Decls',0,'p_Decls','analyze.py',18),
  ('Decl -> ConstDecl','Decl',1,'p_Decl','analyze.py',31),
  ('Decl -> VarDecl','Decl',1,'p_Decl','analyze.py',32),
  ('ConstDecl -> Const BType ConstDefs Semicolon','ConstDecl',4,'p_ConstDecl','analyze.py',38),
  ('ConstDefs -> ConstDef','ConstDefs',1,'p_ConstDefs','analyze.py',44),
  ('ConstDefs -> ConstDefs Comma ConstDef','ConstDefs',3,'p_ConstDefs','analyze.py',45),
  ('BType -> Int','BType',1,'p_BType','analyze.py',54),
  ('ConstDef -> Ident Equal ConstInitVal','ConstDef',3,'p_ConstDef','analyze.py',61),
  ('ConstInitVal -> ConstExp','ConstInitVal',1,'p_ConstInitVal','analyze.py',68),
  ('ConstExp -> AddExp','ConstExp',1,'p_ConstExp','analyze.py',74),
  ('VarDecl -> BType VarDefs Semicolon','VarDecl',3,'p_VarDecl','analyze.py',80),
  ('VarDefs -> VarDef','VarDefs',1,'p_Vardefs','analyze.py',86),
  ('VarDefs -> VarDefs Comma VarDef','VarDefs',3,'p_Vardefs','analyze.py',87),
  ('VarDef -> Ident Equal InitVal','VarDef',3,'p_VarDef','analyze.py',96),
  ('VarDef -> Ident','VarDef',1,'p_VarDef','analyze.py',97),
  ('InitVal -> Exp','InitVal',1,'p_InitVal','analyze.py',108),
  ('FuncDef -> FuncType Main LPar RPar Block','FuncDef',5,'p_Funcdef','analyze.py',114),
  ('FuncType -> Int','FuncType',1,'p_FuncType','analyze.py',123),
  ('Block -> LBrace BlockItems RBrace','Block',3,'p_Block','analyze.py',129),
  ('BlockItems -> <empty>','BlockItems',0,'p_BlockItems','analyze.py',135),
  ('BlockItems -> BlockItems BlockItem','BlockItems',2,'p_BlockItems','analyze.py',136),
  ('BlockItem -> Decl','BlockItem',1,'p_BlockItem','analyze.py',148),
  ('BlockItem -> Stmt','BlockItem',1,'p_BlockItem','analyze.py',149),
  ('Stmt -> Semicolon','Stmt',1,'p_Stmt','analyze.py',156),
  ('Stmt -> Block','Stmt',1,'p_Stmt','analyze.py',157),
  ('Stmt -> Exp Semicolon','Stmt',2,'p_Stmt','analyze.py',158),
  ('Stmt -> Return Exp Semicolon','Stmt',3,'p_Stmt','analyze.py',159),
  ('Stmt -> LVal Equal Exp Semicolon','Stmt',4,'p_Stmt','analyze.py',160),
  ('Stmt -> If LPar Cond RPar Stmt Else Stmt','Stmt',7,'p_Stmt','analyze.py',161),
  ('Stmt -> If LPar Cond RPar Stmt','Stmt',5,'p_Stmt','analyze.py',162),
  ('LVal -> Ident','LVal',1,'p_LVal','analyze.py',187),
  ('Exp -> AddExp','Exp',1,'p_Exp','analyze.py',193),
  ('AddExp -> MulExp','AddExp',1,'p_Addexp','analyze.py',199),
  ('AddExp -> AddExp Plus MulExp','AddExp',3,'p_Addexp','analyze.py',200),
  ('AddExp -> AddExp Minus MulExp','AddExp',3,'p_Addexp','analyze.py',201),
  ('MulExp -> UnaryExp','MulExp',1,'p_MulExp','analyze.py',212),
  ('MulExp -> MulExp Times UnaryExp','MulExp',3,'p_MulExp','analyze.py',213),
  ('MulExp -> MulExp Div UnaryExp','MulExp',3,'p_MulExp','analyze.py',214),
  ('MulExp -> MulExp Mod UnaryExp','MulExp',3,'p_MulExp','analyze.py',215),
  ('UnaryExp -> PrimaryExp','UnaryExp',1,'p_UnaryExp','analyze.py',225),
  ('UnaryExp -> UnaryOp UnaryExp','UnaryExp',2,'p_UnaryExp','analyze.py',226),
  ('UnaryExp -> Ident LPar RPar','UnaryExp',3,'p_UnaryExp','analyze.py',227),
  ('UnaryExp -> Ident LPar FuncRParams RPar','UnaryExp',4,'p_UnaryExp','analyze.py',228),
  ('FuncRParams -> Exp','FuncRParams',1,'p_FuncRParams','analyze.py',241),
  ('FuncRParams -> Exp Exps','FuncRParams',2,'p_FuncRParams','analyze.py',242),
  ('Exps -> Comma Exp','Exps',2,'p_Exps','analyze.py',251),
  ('Exps -> Comma Exp Exps','Exps',3,'p_Exps','analyze.py',252),
  ('PrimaryExp -> LPar Exp RPar','PrimaryExp',3,'p_PrimaryExp','analyze.py',261),
  ('PrimaryExp -> Number','PrimaryExp',1,'p_PrimaryExp','analyze.py',262),
  ('PrimaryExp -> LVal','PrimaryExp',1,'p_PrimaryExp','analyze.py',263),
  ('UnaryOp -> Plus','UnaryOp',1,'p_UnaryOp','analyze.py',277),
  ('UnaryOp -> Minus','UnaryOp',1,'p_UnaryOp','analyze.py',278),
  ('UnaryOp -> Not','UnaryOp',1,'p_UnaryOp','analyze.py',279),
  ('Cond -> LOrExp','Cond',1,'p_Cond','analyze.py',285),
  ('LOrExp -> LAndExp','LOrExp',1,'p_LOrExp','analyze.py',291),
  ('LOrExp -> LOrExp Or LAndExp','LOrExp',3,'p_LOrExp','analyze.py',292),
  ('LAndExp -> EqExp','LAndExp',1,'p_LAndExp','analyze.py',301),
  ('LAndExp -> LAndExp And EqExp','LAndExp',3,'p_LAndExp','analyze.py',302),
  ('EqExp -> RelExp','EqExp',1,'p_EqExp','analyze.py',311),
  ('EqExp -> EqExp Deq RelExp','EqExp',3,'p_EqExp','analyze.py',312),
  ('EqExp -> EqExp Neq RelExp','EqExp',3,'p_EqExp','analyze.py',313),
  ('RelExp -> AddExp','RelExp',1,'p_RelExp','analyze.py',323),
  ('RelExp -> RelExp Less AddExp','RelExp',3,'p_RelExp','analyze.py',324),
  ('RelExp -> RelExp More AddExp','RelExp',3,'p_RelExp','analyze.py',325),
  ('RelExp -> RelExp Leq AddExp','RelExp',3,'p_RelExp','analyze.py',326),
  ('RelExp -> RelExp Geq AddExp','RelExp',3,'p_RelExp','analyze.py',327),
]
