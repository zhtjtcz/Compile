
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'CompUnitAnd Comma Const Deq Div Else Equal Geq Ident If Int LBrace LPar Leq Less Main Minus Mod More Neq Not Number Or Plus RBrace RPar Return Semicolon Times\n\tCompUnit : Definelist\n\t\n\tDefinelist : Decl Definelist\n\t\t\t   | FuncDef\n\t\n\tDecl : ConstDecl\n\t\t | VarDecl\n\t\n\tConstDecl : Const BType ConstDefs Semicolon\n\t\n\tConstDefs : ConstDef\n\t\t\t  | ConstDefs Comma ConstDef\n\t\n\tBType : Int\n\t\n\tConstDef : Ident Equal ConstInitVal\n\t\n\tConstInitVal : ConstExp\n\t\n\tConstExp : AddExp\n\t\n\tVarDecl : BType VarDefs Semicolon\n\t\n\tVarDefs : VarDef\n\t\t\t| VarDefs Comma VarDef\n\t\n\tVarDef : Ident Equal InitVal\n           | Ident\n\t\n\tInitVal : Exp\n\t\n\tFuncDef : FuncType Main LPar RPar Block\n\t\n\tFuncType : Int\n\t\n\tBlock : LBrace BlockItems RBrace\n\t\n\tBlockItems :\n\t\t\t   | BlockItems BlockItem\n\t\n\tBlockItem : Decl\n\t\t\t  | Stmt\n\t\n\tStmt : Semicolon\n\t\t | Block\n\t\t | Exp Semicolon\n\t\t | Return Exp Semicolon\n\t\t | LVal Equal Exp Semicolon\n\t\t | If LPar Cond RPar Stmt Else Stmt\n\t\t | If LPar Cond RPar Stmt\n\t\n\tLVal : Ident\n\t\n\tExp : AddExp\n\t\n\tAddExp : MulExp \n           | AddExp Plus MulExp\n\t\t   | AddExp Minus MulExp\n\t\n\tMulExp : UnaryExp\n           | MulExp Times UnaryExp\n\t\t   | MulExp Div UnaryExp\n\t\t   | MulExp Mod UnaryExp\n\t\n\tUnaryExp : PrimaryExp\n\t\t\t | UnaryOp UnaryExp\n\t\t\t | Ident LPar RPar\n\t\t\t | Ident LPar FuncRParams RPar\n\t\n\tFuncRParams : Exp\n\t\t\t\t| Exp Exps\n\t\n\tExps : Comma Exp\n\t\t | Comma Exp Exps\n\t\n\tPrimaryExp : LPar Exp RPar\n\t\t\t   | Number\n\t\t\t   | LVal\n\t\n\tUnaryOp : Plus\n\t\t\t| Minus\n\t\t\t| Not\n\t\n\tCond : LOrExp\n\t\n\tLOrExp : LAndExp\n           | LOrExp Or LAndExp\n\t\n\tLAndExp : EqExp\n            | LAndExp And EqExp\n\t\n\tEqExp : RelExp\n    \t  | EqExp Deq RelExp\n\t\t  | EqExp Neq RelExp\n\t\n\tRelExp : AddExp\n    \t   | RelExp Less AddExp\n\t\t   | RelExp More AddExp\n\t\t   | RelExp Leq AddExp\n\t\t   | RelExp Geq AddExp\n\t'
    
_lr_action_items = {'Const':([0,3,5,6,22,26,45,58,68,69,70,71,72,73,82,87,96,106,116,],[8,8,-4,-5,-13,-6,-22,8,-21,-23,-24,-25,-26,-27,-28,-29,-30,-32,-31,]),'Int':([0,3,5,6,8,22,26,45,58,68,69,70,71,72,73,82,87,96,106,116,],[10,10,-4,-5,14,-13,-6,-22,14,-21,-23,-24,-25,-26,-27,-28,-29,-30,-32,-31,]),'$end':([1,2,4,11,44,68,],[0,-1,-3,-2,-19,-21,]),'RBrace':([5,6,22,26,45,58,68,69,70,71,72,73,82,87,96,106,116,],[-4,-5,-13,-6,-22,68,-21,-23,-24,-25,-26,-27,-28,-29,-30,-32,-31,]),'Semicolon':([5,6,15,16,17,19,20,22,26,29,30,31,32,33,34,37,38,41,42,45,46,47,48,49,56,58,59,62,63,64,65,66,67,68,69,70,71,72,73,74,76,78,79,82,83,87,88,96,97,106,115,116,],[-4,-5,22,-14,-17,26,-7,-13,-6,-15,-33,-16,-18,-34,-35,-38,-42,-51,-52,-22,-8,-10,-11,-12,-43,72,-44,-36,-37,-39,-40,-41,-50,-21,-23,-24,-25,-26,-27,82,-52,-33,-45,-28,87,-29,96,-30,72,-32,72,-31,]),'Return':([5,6,22,26,45,58,68,69,70,71,72,73,82,87,96,97,106,115,116,],[-4,-5,-13,-6,-22,75,-21,-23,-24,-25,-26,-27,-28,-29,-30,75,-32,75,-31,]),'If':([5,6,22,26,45,58,68,69,70,71,72,73,82,87,96,97,106,115,116,],[-4,-5,-13,-6,-22,77,-21,-23,-24,-25,-26,-27,-28,-29,-30,77,-32,77,-31,]),'LBrace':([5,6,22,25,26,45,58,68,69,70,71,72,73,82,87,96,97,106,115,116,],[-4,-5,-13,45,-6,-22,45,-21,-23,-24,-25,-26,-27,-28,-29,-30,45,-32,45,-31,]),'Ident':([5,6,9,10,13,14,22,23,24,26,27,28,35,36,39,40,43,45,50,51,52,53,54,55,58,68,69,70,71,72,73,75,81,82,84,85,87,96,97,98,99,100,101,102,103,104,105,106,115,116,],[-4,-5,17,-9,21,-9,-13,17,30,-6,21,30,-53,-54,30,30,-55,-22,30,30,30,30,30,30,78,-21,-23,-24,-25,-26,-27,30,30,-28,30,30,-29,-30,78,30,30,30,30,30,30,30,30,-32,78,-31,]),'LPar':([5,6,12,22,24,26,28,30,35,36,39,40,43,45,50,51,52,53,54,55,58,68,69,70,71,72,73,75,77,78,81,82,84,85,87,96,97,98,99,100,101,102,103,104,105,106,115,116,],[-4,-5,18,-13,40,-6,40,50,-53,-54,40,40,-55,-22,40,40,40,40,40,40,40,-21,-23,-24,-25,-26,-27,40,85,50,40,-28,40,40,-29,-30,40,40,40,40,40,40,40,40,40,-32,40,-31,]),'Number':([5,6,22,24,26,28,35,36,39,40,43,45,50,51,52,53,54,55,58,68,69,70,71,72,73,75,81,82,84,85,87,96,97,98,99,100,101,102,103,104,105,106,115,116,],[-4,-5,-13,41,-6,41,-53,-54,41,41,-55,-22,41,41,41,41,41,41,41,-21,-23,-24,-25,-26,-27,41,41,-28,41,41,-29,-30,41,41,41,41,41,41,41,41,41,-32,41,-31,]),'Plus':([5,6,22,24,26,28,30,33,34,35,36,37,38,39,40,41,42,43,45,49,50,51,52,53,54,55,56,58,59,62,63,64,65,66,67,68,69,70,71,72,73,75,76,78,79,81,82,84,85,87,94,96,97,98,99,100,101,102,103,104,105,106,111,112,113,114,115,116,],[-4,-5,-13,35,-6,35,-33,51,-35,-53,-54,-38,-42,35,35,-51,-52,-55,-22,51,35,35,35,35,35,35,-43,35,-44,-36,-37,-39,-40,-41,-50,-21,-23,-24,-25,-26,-27,35,-52,-33,-45,35,-28,35,35,-29,51,-30,35,35,35,35,35,35,35,35,35,-32,51,51,51,51,35,-31,]),'Minus':([5,6,22,24,26,28,30,33,34,35,36,37,38,39,40,41,42,43,45,49,50,51,52,53,54,55,56,58,59,62,63,64,65,66,67,68,69,70,71,72,73,75,76,78,79,81,82,84,85,87,94,96,97,98,99,100,101,102,103,104,105,106,111,112,113,114,115,116,],[-4,-5,-13,36,-6,36,-33,52,-35,-53,-54,-38,-42,36,36,-51,-52,-55,-22,52,36,36,36,36,36,36,-43,36,-44,-36,-37,-39,-40,-41,-50,-21,-23,-24,-25,-26,-27,36,-52,-33,-45,36,-28,36,36,-29,52,-30,36,36,36,36,36,36,36,36,36,-32,52,52,52,52,36,-31,]),'Not':([5,6,22,24,26,28,35,36,39,40,43,45,50,51,52,53,54,55,58,68,69,70,71,72,73,75,81,82,84,85,87,96,97,98,99,100,101,102,103,104,105,106,115,116,],[-4,-5,-13,43,-6,43,-53,-54,43,43,-55,-22,43,43,43,43,43,43,43,-21,-23,-24,-25,-26,-27,43,43,-28,43,43,-29,-30,43,43,43,43,43,43,43,43,43,-32,43,-31,]),'Main':([7,10,],[12,-20,]),'Comma':([15,16,17,19,20,29,30,31,32,33,34,37,38,41,42,46,47,48,49,56,59,61,62,63,64,65,66,67,79,86,],[23,-14,-17,27,-7,-15,-33,-16,-18,-34,-35,-38,-42,-51,-52,-8,-10,-11,-12,-43,-44,81,-36,-37,-39,-40,-41,-50,-45,81,]),'Equal':([17,21,76,78,],[24,28,84,-33,]),'RPar':([18,30,33,34,37,38,41,42,50,56,57,59,60,61,62,63,64,65,66,67,79,80,86,89,90,91,92,93,94,95,107,108,109,110,111,112,113,114,],[25,-33,-34,-35,-38,-42,-51,-52,59,-43,67,-44,79,-46,-36,-37,-39,-40,-41,-50,-45,-47,-48,97,-56,-57,-59,-61,-64,-49,-58,-60,-62,-63,-65,-66,-67,-68,]),'Times':([30,34,37,38,41,42,56,59,62,63,64,65,66,67,76,78,79,],[-33,53,-38,-42,-51,-52,-43,-44,53,53,-39,-40,-41,-50,-52,-33,-45,]),'Div':([30,34,37,38,41,42,56,59,62,63,64,65,66,67,76,78,79,],[-33,54,-38,-42,-51,-52,-43,-44,54,54,-39,-40,-41,-50,-52,-33,-45,]),'Mod':([30,34,37,38,41,42,56,59,62,63,64,65,66,67,76,78,79,],[-33,55,-38,-42,-51,-52,-43,-44,55,55,-39,-40,-41,-50,-52,-33,-45,]),'Less':([30,34,37,38,41,42,56,59,62,63,64,65,66,67,79,93,94,109,110,111,112,113,114,],[-33,-35,-38,-42,-51,-52,-43,-44,-36,-37,-39,-40,-41,-50,-45,102,-64,102,102,-65,-66,-67,-68,]),'More':([30,34,37,38,41,42,56,59,62,63,64,65,66,67,79,93,94,109,110,111,112,113,114,],[-33,-35,-38,-42,-51,-52,-43,-44,-36,-37,-39,-40,-41,-50,-45,103,-64,103,103,-65,-66,-67,-68,]),'Leq':([30,34,37,38,41,42,56,59,62,63,64,65,66,67,79,93,94,109,110,111,112,113,114,],[-33,-35,-38,-42,-51,-52,-43,-44,-36,-37,-39,-40,-41,-50,-45,104,-64,104,104,-65,-66,-67,-68,]),'Geq':([30,34,37,38,41,42,56,59,62,63,64,65,66,67,79,93,94,109,110,111,112,113,114,],[-33,-35,-38,-42,-51,-52,-43,-44,-36,-37,-39,-40,-41,-50,-45,105,-64,105,105,-65,-66,-67,-68,]),'Deq':([30,34,37,38,41,42,56,59,62,63,64,65,66,67,79,92,93,94,108,109,110,111,112,113,114,],[-33,-35,-38,-42,-51,-52,-43,-44,-36,-37,-39,-40,-41,-50,-45,100,-61,-64,100,-62,-63,-65,-66,-67,-68,]),'Neq':([30,34,37,38,41,42,56,59,62,63,64,65,66,67,79,92,93,94,108,109,110,111,112,113,114,],[-33,-35,-38,-42,-51,-52,-43,-44,-36,-37,-39,-40,-41,-50,-45,101,-61,-64,101,-62,-63,-65,-66,-67,-68,]),'And':([30,34,37,38,41,42,56,59,62,63,64,65,66,67,79,91,92,93,94,107,108,109,110,111,112,113,114,],[-33,-35,-38,-42,-51,-52,-43,-44,-36,-37,-39,-40,-41,-50,-45,99,-59,-61,-64,99,-60,-62,-63,-65,-66,-67,-68,]),'Or':([30,34,37,38,41,42,56,59,62,63,64,65,66,67,79,90,91,92,93,94,107,108,109,110,111,112,113,114,],[-33,-35,-38,-42,-51,-52,-43,-44,-36,-37,-39,-40,-41,-50,-45,98,-57,-59,-61,-64,-58,-60,-62,-63,-65,-66,-67,-68,]),'Else':([68,72,73,82,87,96,106,116,],[-21,-26,-27,-28,-29,-30,115,-31,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'CompUnit':([0,],[1,]),'Definelist':([0,3,],[2,11,]),'Decl':([0,3,58,],[3,3,70,]),'FuncDef':([0,3,],[4,4,]),'ConstDecl':([0,3,58,],[5,5,5,]),'VarDecl':([0,3,58,],[6,6,6,]),'FuncType':([0,3,],[7,7,]),'BType':([0,3,8,58,],[9,9,13,9,]),'VarDefs':([9,],[15,]),'VarDef':([9,23,],[16,29,]),'ConstDefs':([13,],[19,]),'ConstDef':([13,27,],[20,46,]),'InitVal':([24,],[31,]),'Exp':([24,40,50,58,75,81,84,97,115,],[32,57,61,74,83,86,88,74,74,]),'AddExp':([24,28,40,50,58,75,81,84,85,97,98,99,100,101,102,103,104,105,115,],[33,49,33,33,33,33,33,33,94,33,94,94,94,94,111,112,113,114,33,]),'MulExp':([24,28,40,50,51,52,58,75,81,84,85,97,98,99,100,101,102,103,104,105,115,],[34,34,34,34,62,63,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,]),'UnaryExp':([24,28,39,40,50,51,52,53,54,55,58,75,81,84,85,97,98,99,100,101,102,103,104,105,115,],[37,37,56,37,37,37,37,64,65,66,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,]),'PrimaryExp':([24,28,39,40,50,51,52,53,54,55,58,75,81,84,85,97,98,99,100,101,102,103,104,105,115,],[38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,]),'UnaryOp':([24,28,39,40,50,51,52,53,54,55,58,75,81,84,85,97,98,99,100,101,102,103,104,105,115,],[39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,]),'LVal':([24,28,39,40,50,51,52,53,54,55,58,75,81,84,85,97,98,99,100,101,102,103,104,105,115,],[42,42,42,42,42,42,42,42,42,42,76,42,42,42,42,76,42,42,42,42,42,42,42,42,76,]),'Block':([25,58,97,115,],[44,73,73,73,]),'ConstInitVal':([28,],[47,]),'ConstExp':([28,],[48,]),'BlockItems':([45,],[58,]),'FuncRParams':([50,],[60,]),'BlockItem':([58,],[69,]),'Stmt':([58,97,115,],[71,106,116,]),'Exps':([61,86,],[80,95,]),'Cond':([85,],[89,]),'LOrExp':([85,],[90,]),'LAndExp':([85,98,],[91,107,]),'EqExp':([85,98,99,],[92,92,108,]),'RelExp':([85,98,99,100,101,],[93,93,93,109,110,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> CompUnit","S'",1,None,None,None),
  ('CompUnit -> Definelist','CompUnit',1,'p_CompUnit','analyze.py',8),
  ('Definelist -> Decl Definelist','Definelist',2,'p_Definelist','analyze.py',17),
  ('Definelist -> FuncDef','Definelist',1,'p_Definelist','analyze.py',18),
  ('Decl -> ConstDecl','Decl',1,'p_Decl','analyze.py',23),
  ('Decl -> VarDecl','Decl',1,'p_Decl','analyze.py',24),
  ('ConstDecl -> Const BType ConstDefs Semicolon','ConstDecl',4,'p_ConstDecl','analyze.py',30),
  ('ConstDefs -> ConstDef','ConstDefs',1,'p_ConstDefs','analyze.py',36),
  ('ConstDefs -> ConstDefs Comma ConstDef','ConstDefs',3,'p_ConstDefs','analyze.py',37),
  ('BType -> Int','BType',1,'p_BType','analyze.py',46),
  ('ConstDef -> Ident Equal ConstInitVal','ConstDef',3,'p_ConstDef','analyze.py',53),
  ('ConstInitVal -> ConstExp','ConstInitVal',1,'p_ConstInitVal','analyze.py',60),
  ('ConstExp -> AddExp','ConstExp',1,'p_ConstExp','analyze.py',66),
  ('VarDecl -> BType VarDefs Semicolon','VarDecl',3,'p_VarDecl','analyze.py',72),
  ('VarDefs -> VarDef','VarDefs',1,'p_Vardefs','analyze.py',78),
  ('VarDefs -> VarDefs Comma VarDef','VarDefs',3,'p_Vardefs','analyze.py',79),
  ('VarDef -> Ident Equal InitVal','VarDef',3,'p_VarDef','analyze.py',88),
  ('VarDef -> Ident','VarDef',1,'p_VarDef','analyze.py',89),
  ('InitVal -> Exp','InitVal',1,'p_InitVal','analyze.py',100),
  ('FuncDef -> FuncType Main LPar RPar Block','FuncDef',5,'p_Funcdef','analyze.py',106),
  ('FuncType -> Int','FuncType',1,'p_FuncType','analyze.py',115),
  ('Block -> LBrace BlockItems RBrace','Block',3,'p_Block','analyze.py',121),
  ('BlockItems -> <empty>','BlockItems',0,'p_BlockItems','analyze.py',127),
  ('BlockItems -> BlockItems BlockItem','BlockItems',2,'p_BlockItems','analyze.py',128),
  ('BlockItem -> Decl','BlockItem',1,'p_BlockItem','analyze.py',140),
  ('BlockItem -> Stmt','BlockItem',1,'p_BlockItem','analyze.py',141),
  ('Stmt -> Semicolon','Stmt',1,'p_Stmt','analyze.py',148),
  ('Stmt -> Block','Stmt',1,'p_Stmt','analyze.py',149),
  ('Stmt -> Exp Semicolon','Stmt',2,'p_Stmt','analyze.py',150),
  ('Stmt -> Return Exp Semicolon','Stmt',3,'p_Stmt','analyze.py',151),
  ('Stmt -> LVal Equal Exp Semicolon','Stmt',4,'p_Stmt','analyze.py',152),
  ('Stmt -> If LPar Cond RPar Stmt Else Stmt','Stmt',7,'p_Stmt','analyze.py',153),
  ('Stmt -> If LPar Cond RPar Stmt','Stmt',5,'p_Stmt','analyze.py',154),
  ('LVal -> Ident','LVal',1,'p_LVal','analyze.py',179),
  ('Exp -> AddExp','Exp',1,'p_Exp','analyze.py',185),
  ('AddExp -> MulExp','AddExp',1,'p_Addexp','analyze.py',191),
  ('AddExp -> AddExp Plus MulExp','AddExp',3,'p_Addexp','analyze.py',192),
  ('AddExp -> AddExp Minus MulExp','AddExp',3,'p_Addexp','analyze.py',193),
  ('MulExp -> UnaryExp','MulExp',1,'p_MulExp','analyze.py',204),
  ('MulExp -> MulExp Times UnaryExp','MulExp',3,'p_MulExp','analyze.py',205),
  ('MulExp -> MulExp Div UnaryExp','MulExp',3,'p_MulExp','analyze.py',206),
  ('MulExp -> MulExp Mod UnaryExp','MulExp',3,'p_MulExp','analyze.py',207),
  ('UnaryExp -> PrimaryExp','UnaryExp',1,'p_UnaryExp','analyze.py',217),
  ('UnaryExp -> UnaryOp UnaryExp','UnaryExp',2,'p_UnaryExp','analyze.py',218),
  ('UnaryExp -> Ident LPar RPar','UnaryExp',3,'p_UnaryExp','analyze.py',219),
  ('UnaryExp -> Ident LPar FuncRParams RPar','UnaryExp',4,'p_UnaryExp','analyze.py',220),
  ('FuncRParams -> Exp','FuncRParams',1,'p_FuncRParams','analyze.py',233),
  ('FuncRParams -> Exp Exps','FuncRParams',2,'p_FuncRParams','analyze.py',234),
  ('Exps -> Comma Exp','Exps',2,'p_Exps','analyze.py',243),
  ('Exps -> Comma Exp Exps','Exps',3,'p_Exps','analyze.py',244),
  ('PrimaryExp -> LPar Exp RPar','PrimaryExp',3,'p_PrimaryExp','analyze.py',253),
  ('PrimaryExp -> Number','PrimaryExp',1,'p_PrimaryExp','analyze.py',254),
  ('PrimaryExp -> LVal','PrimaryExp',1,'p_PrimaryExp','analyze.py',255),
  ('UnaryOp -> Plus','UnaryOp',1,'p_UnaryOp','analyze.py',269),
  ('UnaryOp -> Minus','UnaryOp',1,'p_UnaryOp','analyze.py',270),
  ('UnaryOp -> Not','UnaryOp',1,'p_UnaryOp','analyze.py',271),
  ('Cond -> LOrExp','Cond',1,'p_Cond','analyze.py',277),
  ('LOrExp -> LAndExp','LOrExp',1,'p_LOrExp','analyze.py',283),
  ('LOrExp -> LOrExp Or LAndExp','LOrExp',3,'p_LOrExp','analyze.py',284),
  ('LAndExp -> EqExp','LAndExp',1,'p_LAndExp','analyze.py',293),
  ('LAndExp -> LAndExp And EqExp','LAndExp',3,'p_LAndExp','analyze.py',294),
  ('EqExp -> RelExp','EqExp',1,'p_EqExp','analyze.py',303),
  ('EqExp -> EqExp Deq RelExp','EqExp',3,'p_EqExp','analyze.py',304),
  ('EqExp -> EqExp Neq RelExp','EqExp',3,'p_EqExp','analyze.py',305),
  ('RelExp -> AddExp','RelExp',1,'p_RelExp','analyze.py',315),
  ('RelExp -> RelExp Less AddExp','RelExp',3,'p_RelExp','analyze.py',316),
  ('RelExp -> RelExp More AddExp','RelExp',3,'p_RelExp','analyze.py',317),
  ('RelExp -> RelExp Leq AddExp','RelExp',3,'p_RelExp','analyze.py',318),
  ('RelExp -> RelExp Geq AddExp','RelExp',3,'p_RelExp','analyze.py',319),
]
